# Azure Pipelines YAML pipeline.
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema
name: ninja

trigger:
- flutter-*-tizen
pr:
- flutter-*-tizen

jobs:
- job: build
  strategy:
    matrix:
      tizen-arm-release:
        arch: arm
        mode: release
        targetTriple: arm-linux-gnueabi
      tizen-arm-profile:
        arch: arm
        mode: profile
        targetTriple: arm-linux-gnueabi
      tizen-arm-debug:
        arch: arm
        mode: debug
        targetTriple: arm-linux-gnueabi
      tizen-arm64-release:
        arch: arm64
        mode: release
        targetTriple: aarch64-linux-gnu
      tizen-arm64-profile:
        arch: arm64
        mode: profile
        targetTriple: aarch64-linux-gnu
      tizen-arm64-debug:
        arch: arm64
        mode: debug
        targetTriple: aarch64-linux-gnu
      tizen-x86-debug:
        arch: x86
        mode: debug
        targetTriple: i686-linux-gnu
  pool:
    name: Default
    demands: agent.os -equals Linux
  timeoutInMinutes: 80
  cancelTimeoutInMinutes: 1
  steps:
  - checkout: self
    path: src/flutter
  - bash: |
      gclient sync -f -D
    displayName: Run gclient sync
    workingDirectory: $(Pipeline.Workspace)/src
  - bash: |
      flutter/tools/gn \
        --target-os linux \
        --linux-cpu $(arch) \
        --no-goma \
        --target-toolchain $HOME/tizen_tools/toolchains \
        --target-sysroot $HOME/tizen_tools/sysroot/$(arch) \
        --target-triple $(targetTriple) \
        --runtime-mode $(mode) \
        --enable-fontconfig \
        --no-full-dart-sdk \
        --no-build-embedder-examples \
        --embedder-for-target \
        --build-tizen-shell
      ninja -C out/linux_$(mode)_$(arch)
      cp out/linux_$(mode)_$(arch)/libflutter_*.so $(Build.StagingDirectory)
    displayName: Build
    workingDirectory: $(Pipeline.Workspace)/src
    failOnStderr: true
  - publish: $(Build.StagingDirectory)
    artifact: $(System.JobName)
